// <auto-generated />
using System;
using LittleLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LittleLibrary.Migrations.LittleLibrary
{
    [DbContext(typeof(LittleLibraryContext))]
    [Migration("20190405212247_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("LittleLibrary.Models.Authors", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("authorID");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .HasColumnName("province")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("StreetAddress")
                        .HasColumnName("streetAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("authorProfile")
                        .HasColumnName("authorProfile")
                        .HasColumnType("text");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LittleLibrary.Models.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bookID");

                    b.Property<int?>("AuthorId")
                        .HasColumnName("authorID");

                    b.Property<byte[]>("BookContent")
                        .HasColumnName("bookContent");

                    b.Property<byte[]>("BookCover")
                        .HasColumnName("bookCover");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnName("datePublished")
                        .HasColumnType("date");

                    b.Property<string>("Genre")
                        .HasColumnName("genre")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LittleLibrary.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userID");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("authorizedUserId");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LittleLibrary.Models.UsersBooks", b =>
                {
                    b.Property<int>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userBookID");

                    b.Property<int?>("BookId")
                        .HasColumnName("bookID");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("IsPurchased")
                        .HasColumnName("isPurchased");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PaypalEmail")
                        .HasColumnName("paypalEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("Rating")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .HasColumnName("review")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnName("reviewDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnName("userID");

                    b.Property<string>("UserName");

                    b.Property<string>("amount");

                    b.Property<string>("intent");

                    b.Property<string>("paymentId");

                    b.Property<string>("paymentMethod");

                    b.Property<string>("paymentState");

                    b.HasKey("UserBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersBooks");
                });

            modelBuilder.Entity("LittleLibrary.Models.Books", b =>
                {
                    b.HasOne("LittleLibrary.Models.Authors", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Books__authorID__6E01572D");
                });

            modelBuilder.Entity("LittleLibrary.Models.UsersBooks", b =>
                {
                    b.HasOne("LittleLibrary.Models.Books", "Book")
                        .WithMany("UsersBooks")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__UsersBook__bookI__75A278F5");

                    b.HasOne("LittleLibrary.Models.Users", "User")
                        .WithMany("UsersBooks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UsersBook__userI__74AE54BC");
                });
#pragma warning restore 612, 618
        }
    }
}
